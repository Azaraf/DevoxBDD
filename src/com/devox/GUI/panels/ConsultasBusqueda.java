/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.devox.GUI.panels;

import com.devox.GUI.panels.forms.NuevaDivision;
import com.devox.GUI.panels.forms.NuevoAlmacen;
import com.devox.GUI.panels.forms.NuevoCanal;
import com.devox.GUI.panels.forms.NuevoCliente;
import com.devox.GUI.panels.forms.NuevoLote;
import com.devox.GUI.panels.forms.NuevoMotivo;
import com.devox.GUI.panels.forms.NuevoProducto;
import com.devox.GUI.panels.forms.NuevoTransporte;
import com.devox.GUI.tables.DevoxTableModel;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.inspira.devox.database.DatabaseConnection;
import org.inspira.devox.logger.Log;
import org.inspira.devox.services.queries.DevoxSelectObject;
import org.jdesktop.swingx.JXSearchField;

/**
 *
 * @author azaraf
 */
public class ConsultasBusqueda extends javax.swing.JPanel {

    private PreparedStatement stmt;
    private ResultSet rs;
    private DevoxSelectObject consulta;
    private JXSearchField searchField;
     private TableRowSorter<DefaultTableModel> sorter;
    //363, 30
    /**
     * Creates new form Agregar
     */
    public ConsultasBusqueda() {
        initComponents();
        searchField = new JXSearchField("Buscar");
        searchField.setSize(363, 30);
        searchField.setInstantSearchDelay(100);
        searchField.setSearchMode(JXSearchField.SearchMode.INSTANT);
        searchField.setLayoutStyle(JXSearchField.LayoutStyle.VISTA);
        searchField.setPromptFontStyle(Font.ITALIC);

        searchField.addActionListener((ActionEvent e) -> {
            searchFieldActionListener(e);
        });
        searchPanel.add(searchField, BorderLayout.WEST);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        Agregar = new javax.swing.JPanel();
        botonAgregar = new javax.swing.JLabel();
        Editar = new javax.swing.JPanel();
        botonEditar = new javax.swing.JLabel();
        Eliminar = new javax.swing.JPanel();
        botonEliminar = new javax.swing.JLabel();
        Actuaizar = new javax.swing.JPanel();
        botonActualizar = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(250, 250, 250));

        jScrollPane2.setBackground(new java.awt.Color(250, 250, 250));
        jScrollPane2.setOpaque(false);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Clientes", "Productos", "Lotes", "Almacenes", "Canales de venta", "Divisiones", "Motivos", "Transportes" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Consultar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Agregar.setBackground(new java.awt.Color(9, 91, 173));

        botonAgregar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        botonAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/devox/GUI/images/miniadd.png"))); // NOI18N
        botonAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonAgregarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout AgregarLayout = new javax.swing.GroupLayout(Agregar);
        Agregar.setLayout(AgregarLayout);
        AgregarLayout.setHorizontalGroup(
            AgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(AgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );
        AgregarLayout.setVerticalGroup(
            AgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(AgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );

        Editar.setBackground(new java.awt.Color(9, 91, 173));

        botonEditar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/devox/GUI/images/miniedit.png"))); // NOI18N
        botonEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEditarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout EditarLayout = new javax.swing.GroupLayout(Editar);
        Editar.setLayout(EditarLayout);
        EditarLayout.setHorizontalGroup(
            EditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(EditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );
        EditarLayout.setVerticalGroup(
            EditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(EditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );

        Eliminar.setBackground(new java.awt.Color(255, 102, 102));

        botonEliminar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        botonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/devox/GUI/images/minidelete.png"))); // NOI18N
        botonEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEliminarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout EliminarLayout = new javax.swing.GroupLayout(Eliminar);
        Eliminar.setLayout(EliminarLayout);
        EliminarLayout.setHorizontalGroup(
            EliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(EliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );
        EliminarLayout.setVerticalGroup(
            EliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(EliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );

        Actuaizar.setBackground(new java.awt.Color(9, 91, 173));

        botonActualizar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        botonActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/devox/GUI/images/minirefresh.png"))); // NOI18N
        botonActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonActualizarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ActuaizarLayout = new javax.swing.GroupLayout(Actuaizar);
        Actuaizar.setLayout(ActuaizarLayout);
        ActuaizarLayout.setHorizontalGroup(
            ActuaizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(ActuaizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );
        ActuaizarLayout.setVerticalGroup(
            ActuaizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(ActuaizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(botonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchPanel.setPreferredSize(new java.awt.Dimension(363, 30));

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Editar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Actuaizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 349, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Editar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Actuaizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAgregarMouseClicked
        agregar();
    }//GEN-LAST:event_botonAgregarMouseClicked

    private void botonEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEditarMouseClicked
        editar();
    }//GEN-LAST:event_botonEditarMouseClicked

    private void botonEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEliminarMouseClicked
        eliminar();
    }//GEN-LAST:event_botonEliminarMouseClicked

    private void botonActualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonActualizarMouseClicked
        actualizar();
    }//GEN-LAST:event_botonActualizarMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        actualizar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        actualizar();
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Actuaizar;
    private javax.swing.JPanel Agregar;
    private javax.swing.JPanel Editar;
    private javax.swing.JPanel Eliminar;
    private javax.swing.JLabel botonActualizar;
    private javax.swing.JLabel botonAgregar;
    private javax.swing.JLabel botonEditar;
    private javax.swing.JLabel botonEliminar;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration//GEN-END:variables
    private int r;
    private int filas;
    private DevoxTableModel tabla;

    private void actualizar() {
        DatabaseConnection db = new DatabaseConnection();
        Connection conn = db.getConnection();
        try {
            /**
             * Clientes Productos Lotes Almacenes Canales de venta Divisiones
             * Motivos Transportes
             */
            switch (jComboBox1.getSelectedItem().toString()) {
                case "Clientes":
                    stmt = conn.prepareStatement("select x.idSucursal as 'Clave cliente', x.nombreC as 'Cliente', x.NombreS as 'Cliente Sucursal', x.Familia_idFamilia as 'Division', d.nombre as 'Canal de venta', x.RFC from (select S.idSucursal, C.nombre as nombreC, S.Nombre as nombreS, S.Familia_idFamilia, C.Division_idDivision, C.RFC as RFC from Cliente c join Sucursal s on c.RFC = s.Cliente_RFC) x join division d on x.Division_idDivision = d.idDivision order by x.nombreC");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Clientes");
                    tabla.setClasses(new Class[]{String.class, String.class, String.class, String.class, String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false, false, false, false, false});
                    tabla.buildTable(jScrollPane2, rs);
                    tabla.setColumnIdentifiers(new String[]{"Clave cliente", "Cliente", "Sucursal", "División", "Razón social", "RFC"});

                    break;
                case "Productos":
                    stmt = conn.prepareStatement("Select x.EAN as 'Codigo de Barras', x.Producto_idProducto as 'Codigo interno', x.descripcion as 'Descripcion', x.Sucursal_idSucursal as 'Sucursal', y.Familia_idFamilia as 'Division' from (SELECT h.EAN, h.Producto_idProducto, p.descripcion, h.Sucursal_idSucursal from historialprecio h join producto p on h.Producto_idProducto = p.idProducto) x join Sucursal y on x.Sucursal_idSucursal = y.idSucursal order by x.descripcion");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Productos");
                    tabla.setClasses(new Class[]{String.class, String.class, String.class, String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false, false, false, false});
                    tabla.buildTable(jScrollPane2, rs);
                    tabla.setColumnIdentifiers(new String[]{"Código de Barras", "Código interno", "Descripción", "Clave Cliente", "División"});

                    break;
                case "Lotes":
                    stmt = conn.prepareStatement("select l.idLote as Lote, p.idProducto as 'Codigo interno', p.descripcion as 'Descripcion' from lote l join producto p on l.Producto_idProducto = p.idProducto");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Lotes");
                    tabla.setClasses(new Class[]{String.class, String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false, false});
                    tabla.buildTable(jScrollPane2, rs);
                    tabla.setColumnIdentifiers(new String[]{"Lote", "Código interno de Producto", "Descripción de producto"});

                    break;
                case "Almacenes":
                    stmt = conn.prepareStatement("select * from almacen");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Almacenes");
                    tabla.setClasses(new Class[]{String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false});
                    tabla.buildTable(jScrollPane2, rs);
                    break;
                case "Canales de venta":
                    stmt = conn.prepareStatement("select * from division");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Canales de venta");
                    tabla.setClasses(new Class[]{String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false});
                    tabla.setColumnIdentifiers(new String[]{"id", "Canal de Venta"});
                    tabla.buildTable(jScrollPane2, rs);
                    break;
                case "Divisiones":
                    stmt = conn.prepareStatement("select * from familia");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Divisiones");
                    tabla.setClasses(new Class[]{String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false});
                    tabla.setColumnIdentifiers(new String[]{"División", "Descripción"});
                    tabla.buildTable(jScrollPane2, rs);
                    break;
                case "Motivos":
                    stmt = conn.prepareStatement("select * from Motivo");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Motivos");
                    tabla.setClasses(new Class[]{String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false});
                    tabla.buildTable(jScrollPane2, rs);
                    break;
                case "Transportes":
                    stmt = conn.prepareStatement("select * from transporte");
                    rs = stmt.executeQuery();
                    tabla = new DevoxTableModel();
                    tabla.setName("Transportes");
                    tabla.setClasses(new Class[]{String.class, String.class});
                    tabla.setEditables(new boolean[]{false, false});
                    tabla.buildTable(jScrollPane2, rs);
                    break;
                default:

                    break;
            }
            tabla.getTabla().getSelectionModel().addListSelectionListener(
                    new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    int viewRow = tabla.getTabla().getSelectedRow();

                    if (viewRow < 0) {
                        //Selection got filtered away.
                        Log.print("row selected: " + viewRow);
                        r = viewRow;
                        filas = tabla.getTabla().getSelectedRow();
                    } else {
                        int modelRow = tabla.getTabla().convertRowIndexToModel(viewRow);
                        r = modelRow;
                        Log.print("ROW SELECTED: " + modelRow);
                    }

                }
            }
            );
        } catch (SQLException ex) {
            Logger.getLogger(ConsultasBusqueda.class.getName()).log(Level.SEVERE, null, ex);
        }
        db.closeConnection();
        sorter = new TableRowSorter<>(tabla);
        tabla.getTabla().setRowSorter(sorter);
    }

    private void eliminar() {
        DatabaseConnection db = new DatabaseConnection();
        Connection conn = db.getConnection();

        try {
            System.out.println("Quiere eliminar el dato en la fila " + r + "de la tabla " + tabla.getName());
            if (r != -1) {
                /**
                 * Clientes Productos Lotes Almacenes Canales de venta
                 * Divisiones Motivos Transportes
                 */
                switch (tabla.getName()) {
                    case "Clientes":
                        int h = 0;
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar " + tabla.getValueAt(r, 0).toString()
                                + ",\n" + tabla.getValueAt(r, 1).toString()
                                + ",\n" + tabla.getValueAt(r, 2).toString()
                                + ", " + tabla.getValueAt(r, 3).toString()
                                + ", " + tabla.getValueAt(r, 4).toString()
                                + ",\n" + tabla.getValueAt(r, 5).toString()
                                + " de la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                            stmt = conn.prepareStatement("delete from sucursal where idSucursal = '" + tabla.getValueAt(r, 0).toString() + "'");
                            try {
                                stmt.executeUpdate();
                            } catch (SQLException e) {
                                Log.print(e);
                                h = e.getErrorCode();
                            }

                            if (h == 1451) {
                                JOptionPane.showMessageDialog(null, "No se puede eliminar el cliente\nporque aún tiene productos.", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                Log.print("Eliminó el cliente con isSucursal " + tabla.getValueAt(r, 0).toString());
                                tabla.removeRow(r);
                            }
                        }
                        break;
                    case "Productos":
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar " + tabla.getValueAt(r, 0).toString()
                                + ",\n" + tabla.getValueAt(r, 1).toString()
                                + ",\n" + tabla.getValueAt(r, 2).toString()
                                + ", " + tabla.getValueAt(r, 3).toString()
                                + ",\n" + tabla.getValueAt(r, 4).toString()
                                + " de la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                            Object[] options = {"Sólo de esta sucursal", "De todos los clientes"};
                            int opc = JOptionPane.showOptionDialog(null, "Seleccione una opción:", "Eliminar", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                            if (opc == 0) {//Solo esta sucursal
                                stmt = conn.prepareStatement("delete from Historialprecio where Producto_idProducto = '" + tabla.getValueAt(r, 1).toString() + "' and Sucursal_idSucursal = '" + tabla.getValueAt(r, 3).toString() + "'");
                            } else { //Todos los clientes
                                stmt = conn.prepareStatement("delete from Producto where idProducto = '" + tabla.getValueAt(r, 1).toString() + "'");
                            }
                            try {
                                stmt.executeUpdate();
                                Log.print("Eliminó producto " + tabla.getValueAt(r, 1).toString()
                                        + ",\n" + tabla.getValueAt(r, 2).toString()
                                );
                                tabla.removeRow(r);
                                if (opc == 1) {
                                    actualizar();
                                }
                            } catch (SQLException e) {
                                Log.print(e);
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "No fue posible eliminar");
                            }

                        }
                        break;
                    case "Lotes":
                        int w = 0;
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el Lote " + tabla.getValueAt(r, 0).toString()
                                + ", del producto " + tabla.getValueAt(r, 1).toString()
                                + ",\n" + tabla.getValueAt(r, 2).toString()
                                + " de la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

                            stmt = conn.prepareStatement("delete from lote where idLote = '" + tabla.getValueAt(r, 0).toString() + "'");
                            try {
                                stmt.executeUpdate();
                            } catch (SQLException e) {
                                Log.print(e);
                                e.printStackTrace();
                                w = e.getErrorCode();
                            }

                            if (w == 1451) {
                                JOptionPane.showMessageDialog(null, "No se puede eliminar el lote\nporque está en una devolución.", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                Log.print("Eliminó el lote con idLote " + tabla.getValueAt(r, 0).toString());
                                tabla.removeRow(r);
                            }

                        }
                        break;
                    case "Almacenes":
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el Almacén " + tabla.getValueAt(r, 0).toString()
                                + "\nde la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

                            stmt = conn.prepareStatement("delete from almacen where CV = '" + tabla.getValueAt(r, 0).toString() + "'");
                            stmt.executeUpdate();
                            Log.print("Eliminó el almacén " + tabla.getValueAt(r, 0).toString());
                            tabla.removeRow(r);
                        }
                        break;
                    case "Canales de venta":
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el Canal de venta " + tabla.getValueAt(r, 0).toString()
                                + "\nde la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

                            stmt = conn.prepareStatement("delete from division where idDivision = " + (Integer) tabla.getValueAt(r, 0));
                            stmt.executeUpdate();
                            Log.print("Eliminó el Canal de Venta " + tabla.getValueAt(r, 0).toString());
                            tabla.removeRow(r);
                        }
                        break;
                    case "Divisiones":
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar la División " + tabla.getValueAt(r, 0).toString()
                                + "\nde la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

                            stmt = conn.prepareStatement("delete from familia where idFamilia = '" + tabla.getValueAt(r, 0).toString() + "';");
                            stmt.executeUpdate();
                            Log.print("Eliminó la División " + tabla.getValueAt(r, 0).toString());
                            tabla.removeRow(r);
                        }
                        break;
                    case "Motivos":
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el Motivo " + tabla.getValueAt(r, 0).toString()
                                + "\nde la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

                            stmt = conn.prepareStatement("delete from motivo where idMotivo = " + (Integer) tabla.getValueAt(r, 0));
                            stmt.executeUpdate();
                            Log.print("Eliminó el motivo " + tabla.getValueAt(r, 0).toString());
                            tabla.removeRow(r);
                        }
                        break;
                    case "Transportes":
                        if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el Transporte " + tabla.getValueAt(r, 0).toString()
                                + "\nde la tabla " + tabla.getName() + "?", "Eliminar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

                            stmt = conn.prepareStatement("delete from transporte where idTransporte = '" + tabla.getValueAt(r, 0).toString() + "';");
                            stmt.executeUpdate();
                            Log.print("Eliminó el transporte " + tabla.getValueAt(r, 0).toString());
                            tabla.removeRow(r);
                        }
                        break;

                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ConsultasBusqueda.class.getName()).log(Level.SEVERE, null, ex);
        }
        db.closeConnection();
    }

    private void editar() {
        if (JOptionPane.showConfirmDialog(null, "¿Quiere editar este dato?", "Editar", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            Log.print("Quiere editar: " + tabla.getValueAt(r, 0).toString()
                    + ", " + tabla.getValueAt(r, 1).toString()
                    + " de la tabla " + tabla.getName()
            );
            if (r != -1) {
                /**
                 * Clientes Productos Lotes Almacenes Canales de venta
                 * Divisiones Motivos Transportes
                 */
                switch (tabla.getName()) {
                    case "Clientes":
                        NuevoCliente nc = new NuevoCliente(
                                tabla.getValueAt(r, 0).toString(),
                                tabla.getValueAt(r, 1).toString(),
                                tabla.getValueAt(r, 2).toString(),
                                tabla.getValueAt(r, 3).toString(),
                                tabla.getValueAt(r, 4).toString(),
                                tabla.getValueAt(r, 5).toString());
                        break;
                    case "Productos":
                        NuevoProducto np = new NuevoProducto(
                                tabla.getValueAt(r, 0).toString(),
                                tabla.getValueAt(r, 1).toString(),
                                tabla.getValueAt(r, 2).toString(),
                                tabla.getValueAt(r, 4).toString()
                        );
                        np.setVisible(true);
//                        AgregarProductoFormulario ap = new AgregarProductoFormulario(
//                                tabla.getValueAt(r, 0).toString(),
//                                tabla.getValueAt(r, 1).toString(),
//                                tabla.getValueAt(r, 2).toString(),
//                                tabla.getValueAt(r, 3).toString()
//                        );
//                        ap.setVisible(true);
                        break;
                    case "Lotes":
                        NuevoLote nl = new NuevoLote(
                                tabla.getValueAt(r, 1).toString(),
                                tabla.getValueAt(r, 0).toString(), tabla, r);
                        nl.setVisible(true);
                        break;
                    case "Almacenes":
                        NuevoAlmacen nalma = new NuevoAlmacen(
                                tabla.getValueAt(r, 0).toString(),
                                tabla.getValueAt(r, 1).toString());
                        nalma.setVisible(true);
                        break;
                    case "Canales de venta":
                        NuevoCanal nCan = new NuevoCanal((Integer) tabla.getValueAt(r, 0), tabla.getValueAt(r, 1).toString());
                        nCan.setVisible(true);
                        break;
                    case "Divisiones":
                        NuevaDivision nd = new NuevaDivision(tabla.getValueAt(r, 0).toString(), tabla.getValueAt(r, 1).toString());
                        nd.setVisible(true);
                        break;
                    case "Motivos":
                        NuevoMotivo nmot = new NuevoMotivo((Integer) tabla.getValueAt(r, 0), tabla.getValueAt(r, 1).toString());
                        nmot.setVisible(true);
                        break;
                    case "Transportes":
                        NuevoTransporte nt = new NuevoTransporte(tabla.getValueAt(r, 0).toString(), tabla.getValueAt(r, 1).toString());
                        nt.setVisible(true);
                        break;

                }
            }
        }
    }

    private void agregar() {

        Log.print("Quiere agregar un dato nuevo a la tabla " + tabla.getName());

        switch (tabla.getName()) {
            case "Clientes":
                NuevoCliente nc = new NuevoCliente();
                break;
            case "Productos":
                NuevoProducto agp = new NuevoProducto();
                agp.setVisible(true);
                break;
            case "Lotes":
                NuevoLote nl = new NuevoLote();
                nl.setVisible(true);
                break;
            case "Almacenes":
                NuevoAlmacen nalm = new NuevoAlmacen();
                nalm.setVisible(true);
                break;
            case "Canales de venta":
                NuevoCanal nCan = new NuevoCanal();
                nCan.setVisible(true);
                break;
            case "Divisiones":
                NuevaDivision nd = new NuevaDivision();
                nd.setVisible(true);
                break;
            case "Motivos":
                NuevoMotivo nmot = new NuevoMotivo();
                nmot.setVisible(true);
                break;
            case "Transportes":
                NuevoTransporte nt = new NuevoTransporte();
                nt.setVisible(true);
                break;

        }
    }

    private void searchFieldActionListener(ActionEvent e) {
        String busqueda = searchField.getText();
        System.out.println("busqueda: " + busqueda);
        
        RowFilter<DefaultTableModel, Object> rf = null;

        //If current expression doesn't parse, don't update.
        try {
            
            int[] indeces = new int[tabla.getColumnCount()];
            for(int i = 0; i < tabla.getColumnCount(); i++){
                indeces[i] = i;
            }
            rf = RowFilter.regexFilter(busqueda, indeces);
        } catch (java.util.regex.PatternSyntaxException ex) {
            ex.printStackTrace();
            return;
        }
        sorter.setRowFilter(rf);
        
    }

}
